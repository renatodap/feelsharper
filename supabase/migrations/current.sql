-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.activity_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['weight'::text, 'food'::text, 'exercise'::text, 'mood'::text, 'energy'::text, 'sleep'::text, 'water'::text, 'unknown'::text])),
  data jsonb NOT NULL,
  raw_text text NOT NULL,
  confidence real CHECK (confidence >= 0::double precision AND confidence <= 1::double precision),
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  parsed_data jsonb,
  auto_logged boolean DEFAULT false,
  ai_response text,
  timestamp timestamp with time zone DEFAULT now(),
  CONSTRAINT activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT activity_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.body_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_type text NOT NULL CHECK (goal_type = ANY (ARRAY['weight_loss'::text, 'muscle_gain'::text, 'body_recomposition'::text, 'maintenance'::text, 'performance'::text])),
  target_weight_kg numeric,
  target_body_fat_percentage numeric,
  target_date date,
  weekly_target_kg numeric,
  notes text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT body_goals_pkey PRIMARY KEY (id),
  CONSTRAINT body_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.body_measurements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  measurement_date timestamp with time zone NOT NULL DEFAULT now(),
  weight_kg numeric,
  weight_lb numeric,
  body_fat_percentage numeric,
  muscle_mass_kg numeric,
  visceral_fat_level integer,
  water_percentage numeric,
  bone_mass_kg numeric,
  metabolic_age integer,
  waist_cm numeric,
  chest_cm numeric,
  arm_cm numeric,
  thigh_cm numeric,
  hip_cm numeric,
  neck_cm numeric,
  progress_photo_front text,
  progress_photo_side text,
  progress_photo_back text,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT body_measurements_pkey PRIMARY KEY (id),
  CONSTRAINT body_measurements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.body_trends (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  metric_type text NOT NULL CHECK (metric_type = ANY (ARRAY['weight'::text, 'body_fat'::text, 'muscle_mass'::text])),
  date date NOT NULL,
  value numeric NOT NULL,
  ema_7day numeric,
  ema_30day numeric,
  trend text CHECK (trend = ANY (ARRAY['increasing'::text, 'decreasing'::text, 'stable'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT body_trends_pkey PRIMARY KEY (id),
  CONSTRAINT body_trends_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.coach_interactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  interaction_type text NOT NULL CHECK (interaction_type = ANY (ARRAY['question'::text, 'answer'::text, 'qa'::text])),
  question text,
  answer text,
  related_logs jsonb DEFAULT '[]'::jsonb,
  confidence numeric CHECK (confidence >= 0::numeric AND confidence <= 1::numeric),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT coach_interactions_pkey PRIMARY KEY (id),
  CONSTRAINT coach_interactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.coaching_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  conversation_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_message text,
  ai_response text NOT NULL,
  message_type text DEFAULT 'chat'::text CHECK (message_type = ANY (ARRAY['chat'::text, 'insight'::text, 'challenge'::text, 'reminder'::text])),
  user_context jsonb DEFAULT '{}'::jsonb,
  detected_intent text,
  confidence_score integer CHECK (confidence_score >= 0 AND confidence_score <= 100),
  knowledge_base_refs ARRAY,
  activity_refs ARRAY,
  response_time_ms integer,
  user_rating integer CHECK (user_rating >= 1 AND user_rating <= 5),
  was_helpful boolean,
  follow_up_needed boolean DEFAULT false,
  ai_model_version text DEFAULT 'claude-3-5-sonnet'::text,
  tokens_used integer,
  api_cost_cents integer,
  CONSTRAINT coaching_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT coaching_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.custom_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  brand text,
  serving_size numeric DEFAULT 100,
  serving_unit text DEFAULT 'g'::text,
  calories numeric,
  protein_g numeric,
  carbs_g numeric,
  fat_g numeric,
  fiber_g numeric,
  sugar_g numeric,
  sodium_mg numeric,
  barcode text,
  is_recipe boolean DEFAULT false,
  recipe_ingredients jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT custom_foods_pkey PRIMARY KEY (id),
  CONSTRAINT custom_foods_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.dashboard_widgets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  widget_type text NOT NULL,
  title text NOT NULL,
  enabled boolean DEFAULT true,
  order_position integer NOT NULL DEFAULT 0,
  config_json jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT dashboard_widgets_pkey PRIMARY KEY (id),
  CONSTRAINT dashboard_widgets_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.device_integrations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  device_type text NOT NULL,
  device_id text,
  device_name text,
  is_connected boolean DEFAULT false,
  last_sync_at timestamp with time zone,
  sync_frequency_hours integer DEFAULT 1,
  auto_sync_enabled boolean DEFAULT true,
  sync_activities boolean DEFAULT true,
  sync_heart_rate boolean DEFAULT true,
  sync_sleep boolean DEFAULT true,
  sync_weight boolean DEFAULT true,
  sync_nutrition boolean DEFAULT false,
  auth_token_encrypted text,
  refresh_token_encrypted text,
  token_expires_at timestamp with time zone,
  total_syncs integer DEFAULT 0,
  failed_syncs integer DEFAULT 0,
  last_error text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT device_integrations_pkey PRIMARY KEY (id),
  CONSTRAINT device_integrations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.device_sync_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  device_integration_id uuid NOT NULL,
  sync_started_at timestamp with time zone DEFAULT now(),
  sync_completed_at timestamp with time zone,
  records_processed integer DEFAULT 0,
  records_created integer DEFAULT 0,
  records_updated integer DEFAULT 0,
  records_skipped integer DEFAULT 0,
  sync_status text DEFAULT 'running'::text CHECK (sync_status = ANY (ARRAY['running'::text, 'completed'::text, 'failed'::text, 'partial'::text])),
  error_message text,
  error_details jsonb,
  api_calls_made integer DEFAULT 0,
  data_transferred_kb integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT device_sync_logs_pkey PRIMARY KEY (id),
  CONSTRAINT device_sync_logs_device_integration_id_fkey FOREIGN KEY (device_integration_id) REFERENCES public.device_integrations(id)
);
CREATE TABLE public.exercise_sets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_exercise_id uuid NOT NULL,
  set_number integer NOT NULL DEFAULT 1,
  reps integer,
  weight_kg numeric,
  weight_lb numeric,
  distance_km numeric,
  distance_miles numeric,
  duration_seconds integer,
  rest_seconds integer,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  is_warmup boolean DEFAULT false,
  is_dropset boolean DEFAULT false,
  is_failure boolean DEFAULT false,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT exercise_sets_pkey PRIMARY KEY (id),
  CONSTRAINT exercise_sets_workout_exercise_id_fkey FOREIGN KEY (workout_exercise_id) REFERENCES public.workout_exercises(id)
);
CREATE TABLE public.exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  category text NOT NULL,
  equipment text,
  muscle_group ARRAY,
  is_compound boolean DEFAULT false,
  instructions text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT exercises_pkey PRIMARY KEY (id)
);
CREATE TABLE public.food_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  log_date date NOT NULL,
  meal_type text,
  food_name text,
  quantity_g numeric,
  calories numeric,
  protein_g numeric,
  carbs_g numeric,
  fat_g numeric,
  created_at timestamp with time zone DEFAULT now(),
  food_id text,
  quantity numeric,
  unit text DEFAULT 'g'::text,
  fiber_g numeric,
  sugar_g numeric,
  sodium_mg numeric,
  logged_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT food_logs_pkey PRIMARY KEY (id),
  CONSTRAINT food_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.foods (
  id text NOT NULL,
  name text NOT NULL,
  brand text,
  category text,
  serving_size numeric DEFAULT 100,
  serving_unit text DEFAULT 'g'::text,
  calories numeric,
  protein_g numeric,
  carbs_g numeric,
  fat_g numeric,
  fiber_g numeric,
  sugar_g numeric,
  sodium_mg numeric,
  is_verified boolean DEFAULT false,
  barcode text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT foods_pkey PRIMARY KEY (id)
);
CREATE TABLE public.insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  rule_id text NOT NULL,
  title text NOT NULL,
  body text NOT NULL,
  severity text NOT NULL CHECK (severity = ANY (ARRAY['info'::text, 'warning'::text, 'critical'::text])),
  evidence_json jsonb NOT NULL DEFAULT '{}'::jsonb,
  snoozed_until timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT insights_pkey PRIMARY KEY (id),
  CONSTRAINT insights_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.knowledge_base (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  category text NOT NULL,
  topic text NOT NULL,
  content text NOT NULL,
  source text,
  confidence_score numeric CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0),
  last_verified date DEFAULT CURRENT_DATE,
  tags ARRAY,
  is_controversial boolean DEFAULT false,
  applies_to_constraints jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT knowledge_base_pkey PRIMARY KEY (id)
);
CREATE TABLE public.parsing_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  activity_log_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  raw_input text NOT NULL,
  input_method text DEFAULT 'text'::text CHECK (input_method = ANY (ARRAY['text'::text, 'voice'::text, 'quick_action'::text])),
  input_length integer,
  detected_language text DEFAULT 'en'::text,
  ai_model_used text NOT NULL,
  processing_time_ms integer,
  tokens_consumed integer,
  api_cost_cents integer,
  detected_intents jsonb,
  extracted_entities jsonb,
  confidence_breakdown jsonb,
  ambiguities_detected jsonb,
  user_confirmed_accuracy boolean,
  corrections_made jsonb,
  success_score numeric,
  error_messages ARRAY,
  debug_info jsonb,
  CONSTRAINT parsing_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT parsing_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text,
  full_name text,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  age_range text,
  gender text,
  activity_level text,
  primary_goal text,
  secondary_goals jsonb,
  target_timeline text,
  motivation_styles jsonb,
  preferred_workout_time text,
  accountability_preference text,
  current_weight numeric,
  target_weight numeric,
  height numeric,
  body_fat_percentage numeric,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.sleep_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  log_date date NOT NULL,
  hours numeric,
  quality integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT sleep_logs_pkey PRIMARY KEY (id),
  CONSTRAINT sleep_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL DEFAULT CURRENT_DATE,
  sessions_count integer DEFAULT 0,
  total_session_duration_seconds integer DEFAULT 0,
  logs_created integer DEFAULT 0,
  voice_logs_count integer DEFAULT 0,
  quick_actions_used integer DEFAULT 0,
  coaching_interactions integer DEFAULT 0,
  insights_viewed integer DEFAULT 0,
  questions_asked integer DEFAULT 0,
  dashboard_views integer DEFAULT 0,
  profile_updates integer DEFAULT 0,
  integrations_used integer DEFAULT 0,
  avg_confidence_score numeric,
  user_corrections integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT user_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_habits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  habit_signature text NOT NULL,
  activity_type USER-DEFINED NOT NULL,
  typical_data jsonb NOT NULL,
  time_of_day ARRAY,
  days_of_week ARRAY,
  frequency_per_week numeric,
  occurrence_count integer DEFAULT 1,
  last_occurred timestamp with time zone,
  confidence_score numeric DEFAULT 0.1,
  display_text text NOT NULL,
  quick_log_data jsonb NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_habits_pkey PRIMARY KEY (id),
  CONSTRAINT user_habits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_knowledge_index (
  user_id uuid NOT NULL,
  knowledge_id uuid NOT NULL,
  relevance_score numeric DEFAULT 0.5,
  last_accessed timestamp with time zone,
  times_referenced integer DEFAULT 0,
  user_rating integer CHECK (user_rating >= 1 AND user_rating <= 5),
  CONSTRAINT user_knowledge_index_pkey PRIMARY KEY (user_id, knowledge_id),
  CONSTRAINT user_knowledge_index_knowledge_id_fkey FOREIGN KEY (knowledge_id) REFERENCES public.knowledge_base(id),
  CONSTRAINT user_knowledge_index_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  user_id uuid NOT NULL,
  units_weight text NOT NULL DEFAULT 'lbs'::text CHECK (units_weight = ANY (ARRAY['lbs'::text, 'kg'::text])),
  units_distance text NOT NULL DEFAULT 'mi'::text CHECK (units_distance = ANY (ARRAY['mi'::text, 'km'::text])),
  units_volume text NOT NULL DEFAULT 'oz'::text CHECK (units_volume = ANY (ARRAY['oz'::text, 'ml'::text])),
  time_format text NOT NULL DEFAULT '12h'::text CHECK (time_format = ANY (ARRAY['12h'::text, '24h'::text])),
  persona_preset text NOT NULL DEFAULT 'auto'::text CHECK (persona_preset = ANY (ARRAY['auto'::text, 'endurance'::text, 'strength'::text, 'tennis'::text, 'weight'::text, 'wellness'::text])),
  goals_json jsonb DEFAULT '{}'::jsonb,
  coaching_style text NOT NULL DEFAULT 'direct'::text CHECK (coaching_style = ANY (ARRAY['direct'::text, 'supportive'::text])),
  reminder_time time without time zone,
  widget_preferences jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  tier text DEFAULT 'free'::text CHECK (tier = ANY (ARRAY['free'::text, 'premium'::text, 'pro'::text, 'enterprise'::text])),
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'canceled'::text, 'expired'::text, 'paused'::text])),
  monthly_price_cents integer DEFAULT 0,
  annual_discount_percent integer DEFAULT 0,
  billing_cycle text DEFAULT 'monthly'::text CHECK (billing_cycle = ANY (ARRAY['monthly'::text, 'annual'::text])),
  trial_started_at timestamp with time zone,
  trial_ends_at timestamp with time zone,
  subscription_started_at timestamp with time zone,
  current_period_start timestamp with time zone,
  current_period_end timestamp with time zone,
  canceled_at timestamp with time zone,
  api_calls_limit integer DEFAULT 100,
  api_calls_used integer DEFAULT 0,
  stripe_subscription_id text,
  stripe_customer_id text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  name text,
  height_cm numeric,
  weight_kg numeric,
  age integer,
  gender text,
  goal text,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_id uuid NOT NULL,
  exercise_id uuid,
  exercise_name text NOT NULL,
  exercise_order integer NOT NULL DEFAULT 1,
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT workout_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT workout_exercises_workout_id_fkey FOREIGN KEY (workout_id) REFERENCES public.workouts(id),
  CONSTRAINT workout_exercises_exercise_id_fkey FOREIGN KEY (exercise_id) REFERENCES public.exercises(id)
);
CREATE TABLE public.workout_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  log_date date NOT NULL,
  workout_type text,
  exercise_name text,
  sets integer,
  reps integer,
  weight_kg numeric,
  duration_min numeric,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_logs_pkey PRIMARY KEY (id),
  CONSTRAINT workout_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workouts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  workout_date timestamp with time zone NOT NULL DEFAULT now(),
  type text CHECK (type = ANY (ARRAY['strength'::text, 'cardio'::text, 'flexibility'::text, 'sports'::text, 'mixed'::text, 'other'::text])),
  duration_minutes integer,
  notes text,
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 10),
  completed boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workouts_pkey PRIMARY KEY (id),
  CONSTRAINT workouts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);